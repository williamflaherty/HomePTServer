#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18034
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace HomePTServer.Models
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="PTDatabase")]
	public partial class PTLinkDatabaseDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertCategory(Category instance);
    partial void UpdateCategory(Category instance);
    partial void DeleteCategory(Category instance);
    partial void InsertUser(User instance);
    partial void UpdateUser(User instance);
    partial void DeleteUser(User instance);
    partial void InsertContentType(ContentType instance);
    partial void UpdateContentType(ContentType instance);
    partial void DeleteContentType(ContentType instance);
    partial void InsertDivision(Division instance);
    partial void UpdateDivision(Division instance);
    partial void DeleteDivision(Division instance);
    partial void InsertExercise(Exercise instance);
    partial void UpdateExercise(Exercise instance);
    partial void DeleteExercise(Exercise instance);
    partial void InsertExerciseProgressXref(ExerciseProgressXref instance);
    partial void UpdateExerciseProgressXref(ExerciseProgressXref instance);
    partial void DeleteExerciseProgressXref(ExerciseProgressXref instance);
    partial void InsertExerciseTemplate(ExerciseTemplate instance);
    partial void UpdateExerciseTemplate(ExerciseTemplate instance);
    partial void DeleteExerciseTemplate(ExerciseTemplate instance);
    partial void InsertExerciseTemplateDoctorXref(ExerciseTemplateDoctorXref instance);
    partial void UpdateExerciseTemplateDoctorXref(ExerciseTemplateDoctorXref instance);
    partial void DeleteExerciseTemplateDoctorXref(ExerciseTemplateDoctorXref instance);
    partial void InsertInstitution(Institution instance);
    partial void UpdateInstitution(Institution instance);
    partial void DeleteInstitution(Institution instance);
    partial void InsertInstruction(Instruction instance);
    partial void UpdateInstruction(Instruction instance);
    partial void DeleteInstruction(Instruction instance);
    partial void InsertInstructionImage(InstructionImage instance);
    partial void UpdateInstructionImage(InstructionImage instance);
    partial void DeleteInstructionImage(InstructionImage instance);
    partial void InsertMessage(Message instance);
    partial void UpdateMessage(Message instance);
    partial void DeleteMessage(Message instance);
    partial void InsertNote(Note instance);
    partial void UpdateNote(Note instance);
    partial void DeleteNote(Note instance);
    partial void InsertPerson(Person instance);
    partial void UpdatePerson(Person instance);
    partial void DeletePerson(Person instance);
    partial void InsertPersonSetting(PersonSetting instance);
    partial void UpdatePersonSetting(PersonSetting instance);
    partial void DeletePersonSetting(PersonSetting instance);
    partial void InsertProgress(Progress instance);
    partial void UpdateProgress(Progress instance);
    partial void DeleteProgress(Progress instance);
    partial void InsertProtocol(Protocol instance);
    partial void UpdateProtocol(Protocol instance);
    partial void DeleteProtocol(Protocol instance);
    partial void InsertProtocolTemplate(ProtocolTemplate instance);
    partial void UpdateProtocolTemplate(ProtocolTemplate instance);
    partial void DeleteProtocolTemplate(ProtocolTemplate instance);
    partial void InsertProtocolTemplateDoctorXref(ProtocolTemplateDoctorXref instance);
    partial void UpdateProtocolTemplateDoctorXref(ProtocolTemplateDoctorXref instance);
    partial void DeleteProtocolTemplateDoctorXref(ProtocolTemplateDoctorXref instance);
    partial void InsertRegistrationStatus(RegistrationStatus instance);
    partial void UpdateRegistrationStatus(RegistrationStatus instance);
    partial void DeleteRegistrationStatus(RegistrationStatus instance);
    partial void InsertTag(Tag instance);
    partial void UpdateTag(Tag instance);
    partial void DeleteTag(Tag instance);
    #endregion
		
		public PTLinkDatabaseDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["PTDatabaseConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public PTLinkDatabaseDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public PTLinkDatabaseDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public PTLinkDatabaseDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public PTLinkDatabaseDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Category> Categories
		{
			get
			{
				return this.GetTable<Category>();
			}
		}
		
		public System.Data.Linq.Table<User> Users
		{
			get
			{
				return this.GetTable<User>();
			}
		}
		
		public System.Data.Linq.Table<ContentType> ContentTypes
		{
			get
			{
				return this.GetTable<ContentType>();
			}
		}
		
		public System.Data.Linq.Table<Division> Divisions
		{
			get
			{
				return this.GetTable<Division>();
			}
		}
		
		public System.Data.Linq.Table<Exercise> Exercises
		{
			get
			{
				return this.GetTable<Exercise>();
			}
		}
		
		public System.Data.Linq.Table<ExerciseProgressXref> ExerciseProgressXrefs
		{
			get
			{
				return this.GetTable<ExerciseProgressXref>();
			}
		}
		
		public System.Data.Linq.Table<ExerciseTemplate> ExerciseTemplates
		{
			get
			{
				return this.GetTable<ExerciseTemplate>();
			}
		}
		
		public System.Data.Linq.Table<ExerciseTemplateDoctorXref> ExerciseTemplateDoctorXrefs
		{
			get
			{
				return this.GetTable<ExerciseTemplateDoctorXref>();
			}
		}
		
		public System.Data.Linq.Table<Institution> Institutions
		{
			get
			{
				return this.GetTable<Institution>();
			}
		}
		
		public System.Data.Linq.Table<Instruction> Instructions
		{
			get
			{
				return this.GetTable<Instruction>();
			}
		}
		
		public System.Data.Linq.Table<InstructionImage> InstructionImages
		{
			get
			{
				return this.GetTable<InstructionImage>();
			}
		}
		
		public System.Data.Linq.Table<Message> Messages
		{
			get
			{
				return this.GetTable<Message>();
			}
		}
		
		public System.Data.Linq.Table<Note> Notes
		{
			get
			{
				return this.GetTable<Note>();
			}
		}
		
		public System.Data.Linq.Table<Person> Persons
		{
			get
			{
				return this.GetTable<Person>();
			}
		}
		
		public System.Data.Linq.Table<PersonSetting> PersonSettings
		{
			get
			{
				return this.GetTable<PersonSetting>();
			}
		}
		
		public System.Data.Linq.Table<Progress> Progresses
		{
			get
			{
				return this.GetTable<Progress>();
			}
		}
		
		public System.Data.Linq.Table<Protocol> Protocols
		{
			get
			{
				return this.GetTable<Protocol>();
			}
		}
		
		public System.Data.Linq.Table<ProtocolDoctorXref> ProtocolDoctorXrefs
		{
			get
			{
				return this.GetTable<ProtocolDoctorXref>();
			}
		}
		
		public System.Data.Linq.Table<ProtocolTemplate> ProtocolTemplates
		{
			get
			{
				return this.GetTable<ProtocolTemplate>();
			}
		}
		
		public System.Data.Linq.Table<ProtocolTemplateDoctorXref> ProtocolTemplateDoctorXrefs
		{
			get
			{
				return this.GetTable<ProtocolTemplateDoctorXref>();
			}
		}
		
		public System.Data.Linq.Table<RegistrationStatus> RegistrationStatus
		{
			get
			{
				return this.GetTable<RegistrationStatus>();
			}
		}
		
		public System.Data.Linq.Table<Tag> Tags
		{
			get
			{
				return this.GetTable<Tag>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Category")]
	public partial class Category : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private EntitySet<ExerciseTemplate> _ExerciseTemplates;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public Category()
		{
			this._ExerciseTemplates = new EntitySet<ExerciseTemplate>(new Action<ExerciseTemplate>(this.attach_ExerciseTemplates), new Action<ExerciseTemplate>(this.detach_ExerciseTemplates));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(255)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Category_ExerciseTemplate", Storage="_ExerciseTemplates", ThisKey="Id", OtherKey="CategoryId")]
		public EntitySet<ExerciseTemplate> ExerciseTemplates
		{
			get
			{
				return this._ExerciseTemplates;
			}
			set
			{
				this._ExerciseTemplates.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ExerciseTemplates(ExerciseTemplate entity)
		{
			this.SendPropertyChanging();
			entity.Category = this;
		}
		
		private void detach_ExerciseTemplates(ExerciseTemplate entity)
		{
			this.SendPropertyChanging();
			entity.Category = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Users")]
	public partial class User : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Email;
		
		private int _RegistrationStatusId;
		
		private string _Password;
		
		private EntitySet<Person> _Persons;
		
		private EntityRef<RegistrationStatus> _RegistrationStatus;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnRegistrationStatusIdChanging(int value);
    partial void OnRegistrationStatusIdChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    #endregion
		
		public User()
		{
			this._Persons = new EntitySet<Person>(new Action<Person>(this.attach_Persons), new Action<Person>(this.detach_Persons));
			this._RegistrationStatus = default(EntityRef<RegistrationStatus>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RegistrationStatusId", DbType="Int NOT NULL")]
		public int RegistrationStatusId
		{
			get
			{
				return this._RegistrationStatusId;
			}
			set
			{
				if ((this._RegistrationStatusId != value))
				{
					if (this._RegistrationStatus.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRegistrationStatusIdChanging(value);
					this.SendPropertyChanging();
					this._RegistrationStatusId = value;
					this.SendPropertyChanged("RegistrationStatusId");
					this.OnRegistrationStatusIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Password", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Password
		{
			get
			{
				return this._Password;
			}
			set
			{
				if ((this._Password != value))
				{
					this.OnPasswordChanging(value);
					this.SendPropertyChanging();
					this._Password = value;
					this.SendPropertyChanged("Password");
					this.OnPasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Person", Storage="_Persons", ThisKey="Id", OtherKey="UserId")]
		public EntitySet<Person> Persons
		{
			get
			{
				return this._Persons;
			}
			set
			{
				this._Persons.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="RegistrationStatus_User", Storage="_RegistrationStatus", ThisKey="RegistrationStatusId", OtherKey="Id", IsForeignKey=true)]
		public RegistrationStatus RegistrationStatus
		{
			get
			{
				return this._RegistrationStatus.Entity;
			}
			set
			{
				RegistrationStatus previousValue = this._RegistrationStatus.Entity;
				if (((previousValue != value) 
							|| (this._RegistrationStatus.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._RegistrationStatus.Entity = null;
						previousValue.Users.Remove(this);
					}
					this._RegistrationStatus.Entity = value;
					if ((value != null))
					{
						value.Users.Add(this);
						this._RegistrationStatusId = value.Id;
					}
					else
					{
						this._RegistrationStatusId = default(int);
					}
					this.SendPropertyChanged("RegistrationStatus");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Persons(Person entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_Persons(Person entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ContentType")]
	public partial class ContentType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private EntitySet<Message> _Messages;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public ContentType()
		{
			this._Messages = new EntitySet<Message>(new Action<Message>(this.attach_Messages), new Action<Message>(this.detach_Messages));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(255) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ContentType_Message", Storage="_Messages", ThisKey="Id", OtherKey="ContentTypeId")]
		public EntitySet<Message> Messages
		{
			get
			{
				return this._Messages;
			}
			set
			{
				this._Messages.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Messages(Message entity)
		{
			this.SendPropertyChanging();
			entity.ContentType = this;
		}
		
		private void detach_Messages(Message entity)
		{
			this.SendPropertyChanging();
			entity.ContentType = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Division")]
	public partial class Division : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _InstitutionId;
		
		private string _Name;
		
		private EntitySet<Person> _Persons;
		
		private EntityRef<Institution> _Institution;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnInstitutionIdChanging(int value);
    partial void OnInstitutionIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public Division()
		{
			this._Persons = new EntitySet<Person>(new Action<Person>(this.attach_Persons), new Action<Person>(this.detach_Persons));
			this._Institution = default(EntityRef<Institution>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InstitutionId", DbType="Int NOT NULL")]
		public int InstitutionId
		{
			get
			{
				return this._InstitutionId;
			}
			set
			{
				if ((this._InstitutionId != value))
				{
					if (this._Institution.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnInstitutionIdChanging(value);
					this.SendPropertyChanging();
					this._InstitutionId = value;
					this.SendPropertyChanged("InstitutionId");
					this.OnInstitutionIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(255) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Division_Person", Storage="_Persons", ThisKey="Id", OtherKey="DivisionId")]
		public EntitySet<Person> Persons
		{
			get
			{
				return this._Persons;
			}
			set
			{
				this._Persons.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Institution_Division", Storage="_Institution", ThisKey="InstitutionId", OtherKey="Id", IsForeignKey=true)]
		public Institution Institution
		{
			get
			{
				return this._Institution.Entity;
			}
			set
			{
				Institution previousValue = this._Institution.Entity;
				if (((previousValue != value) 
							|| (this._Institution.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Institution.Entity = null;
						previousValue.Divisions.Remove(this);
					}
					this._Institution.Entity = value;
					if ((value != null))
					{
						value.Divisions.Add(this);
						this._InstitutionId = value.Id;
					}
					else
					{
						this._InstitutionId = default(int);
					}
					this.SendPropertyChanged("Institution");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Persons(Person entity)
		{
			this.SendPropertyChanging();
			entity.Division = this;
		}
		
		private void detach_Persons(Person entity)
		{
			this.SendPropertyChanging();
			entity.Division = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Exercise")]
	public partial class Exercise : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _ExerciseTemplateId;
		
		private System.Nullable<int> _ProtocolTemplateId;
		
		private System.Nullable<int> _ProtocolId;
		
		private System.Nullable<bool> _HasTimer;
		
		private int _Position;
		
		private System.Nullable<int> _TimerDuration;
		
		private string _Days;
		
		private System.Nullable<long> _StartDate;
		
		private System.Nullable<long> _EndDate;
		
		private System.Nullable<int> _RepetitionQuantity;
		
		private string _SpecialInstruction;
		
		private System.Nullable<int> _RestDuration;
		
		private System.Nullable<int> _SetQuantity;
		
		private string _Value;
		
		private EntitySet<ExerciseProgressXref> _ExerciseProgressXrefs;
		
		private EntitySet<Message> _Messages;
		
		private EntitySet<Note> _Notes;
		
		private EntityRef<ExerciseTemplate> _ExerciseTemplate;
		
		private EntityRef<Protocol> _Protocol;
		
		private EntityRef<ProtocolTemplate> _ProtocolTemplate;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnExerciseTemplateIdChanging(int value);
    partial void OnExerciseTemplateIdChanged();
    partial void OnProtocolTemplateIdChanging(System.Nullable<int> value);
    partial void OnProtocolTemplateIdChanged();
    partial void OnProtocolIdChanging(System.Nullable<int> value);
    partial void OnProtocolIdChanged();
    partial void OnHasTimerChanging(System.Nullable<bool> value);
    partial void OnHasTimerChanged();
    partial void OnPositionChanging(int value);
    partial void OnPositionChanged();
    partial void OnTimerDurationChanging(System.Nullable<int> value);
    partial void OnTimerDurationChanged();
    partial void OnDaysChanging(string value);
    partial void OnDaysChanged();
    partial void OnStartDateChanging(System.Nullable<long> value);
    partial void OnStartDateChanged();
    partial void OnEndDateChanging(System.Nullable<long> value);
    partial void OnEndDateChanged();
    partial void OnRepetitionQuantityChanging(System.Nullable<int> value);
    partial void OnRepetitionQuantityChanged();
    partial void OnSpecialInstructionChanging(string value);
    partial void OnSpecialInstructionChanged();
    partial void OnRestDurationChanging(System.Nullable<int> value);
    partial void OnRestDurationChanged();
    partial void OnSetQuantityChanging(System.Nullable<int> value);
    partial void OnSetQuantityChanged();
    partial void OnValueChanging(string value);
    partial void OnValueChanged();
    #endregion
		
		public Exercise()
		{
			this._ExerciseProgressXrefs = new EntitySet<ExerciseProgressXref>(new Action<ExerciseProgressXref>(this.attach_ExerciseProgressXrefs), new Action<ExerciseProgressXref>(this.detach_ExerciseProgressXrefs));
			this._Messages = new EntitySet<Message>(new Action<Message>(this.attach_Messages), new Action<Message>(this.detach_Messages));
			this._Notes = new EntitySet<Note>(new Action<Note>(this.attach_Notes), new Action<Note>(this.detach_Notes));
			this._ExerciseTemplate = default(EntityRef<ExerciseTemplate>);
			this._Protocol = default(EntityRef<Protocol>);
			this._ProtocolTemplate = default(EntityRef<ProtocolTemplate>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ExerciseTemplateId", DbType="Int NOT NULL")]
		public int ExerciseTemplateId
		{
			get
			{
				return this._ExerciseTemplateId;
			}
			set
			{
				if ((this._ExerciseTemplateId != value))
				{
					if (this._ExerciseTemplate.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnExerciseTemplateIdChanging(value);
					this.SendPropertyChanging();
					this._ExerciseTemplateId = value;
					this.SendPropertyChanged("ExerciseTemplateId");
					this.OnExerciseTemplateIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProtocolTemplateId", DbType="Int")]
		public System.Nullable<int> ProtocolTemplateId
		{
			get
			{
				return this._ProtocolTemplateId;
			}
			set
			{
				if ((this._ProtocolTemplateId != value))
				{
					if (this._ProtocolTemplate.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProtocolTemplateIdChanging(value);
					this.SendPropertyChanging();
					this._ProtocolTemplateId = value;
					this.SendPropertyChanged("ProtocolTemplateId");
					this.OnProtocolTemplateIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProtocolId", DbType="Int")]
		public System.Nullable<int> ProtocolId
		{
			get
			{
				return this._ProtocolId;
			}
			set
			{
				if ((this._ProtocolId != value))
				{
					if (this._Protocol.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProtocolIdChanging(value);
					this.SendPropertyChanging();
					this._ProtocolId = value;
					this.SendPropertyChanged("ProtocolId");
					this.OnProtocolIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HasTimer", DbType="Bit")]
		public System.Nullable<bool> HasTimer
		{
			get
			{
				return this._HasTimer;
			}
			set
			{
				if ((this._HasTimer != value))
				{
					this.OnHasTimerChanging(value);
					this.SendPropertyChanging();
					this._HasTimer = value;
					this.SendPropertyChanged("HasTimer");
					this.OnHasTimerChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Position", DbType="Int NOT NULL")]
		public int Position
		{
			get
			{
				return this._Position;
			}
			set
			{
				if ((this._Position != value))
				{
					this.OnPositionChanging(value);
					this.SendPropertyChanging();
					this._Position = value;
					this.SendPropertyChanged("Position");
					this.OnPositionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TimerDuration", DbType="Int")]
		public System.Nullable<int> TimerDuration
		{
			get
			{
				return this._TimerDuration;
			}
			set
			{
				if ((this._TimerDuration != value))
				{
					this.OnTimerDurationChanging(value);
					this.SendPropertyChanging();
					this._TimerDuration = value;
					this.SendPropertyChanged("TimerDuration");
					this.OnTimerDurationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Days", DbType="VarChar(7)")]
		public string Days
		{
			get
			{
				return this._Days;
			}
			set
			{
				if ((this._Days != value))
				{
					this.OnDaysChanging(value);
					this.SendPropertyChanging();
					this._Days = value;
					this.SendPropertyChanged("Days");
					this.OnDaysChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StartDate", DbType="BigInt")]
		public System.Nullable<long> StartDate
		{
			get
			{
				return this._StartDate;
			}
			set
			{
				if ((this._StartDate != value))
				{
					this.OnStartDateChanging(value);
					this.SendPropertyChanging();
					this._StartDate = value;
					this.SendPropertyChanged("StartDate");
					this.OnStartDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EndDate", DbType="BigInt")]
		public System.Nullable<long> EndDate
		{
			get
			{
				return this._EndDate;
			}
			set
			{
				if ((this._EndDate != value))
				{
					this.OnEndDateChanging(value);
					this.SendPropertyChanging();
					this._EndDate = value;
					this.SendPropertyChanged("EndDate");
					this.OnEndDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RepetitionQuantity", DbType="Int")]
		public System.Nullable<int> RepetitionQuantity
		{
			get
			{
				return this._RepetitionQuantity;
			}
			set
			{
				if ((this._RepetitionQuantity != value))
				{
					this.OnRepetitionQuantityChanging(value);
					this.SendPropertyChanging();
					this._RepetitionQuantity = value;
					this.SendPropertyChanged("RepetitionQuantity");
					this.OnRepetitionQuantityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SpecialInstruction", DbType="VarChar(MAX)")]
		public string SpecialInstruction
		{
			get
			{
				return this._SpecialInstruction;
			}
			set
			{
				if ((this._SpecialInstruction != value))
				{
					this.OnSpecialInstructionChanging(value);
					this.SendPropertyChanging();
					this._SpecialInstruction = value;
					this.SendPropertyChanged("SpecialInstruction");
					this.OnSpecialInstructionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RestDuration", DbType="Int")]
		public System.Nullable<int> RestDuration
		{
			get
			{
				return this._RestDuration;
			}
			set
			{
				if ((this._RestDuration != value))
				{
					this.OnRestDurationChanging(value);
					this.SendPropertyChanging();
					this._RestDuration = value;
					this.SendPropertyChanged("RestDuration");
					this.OnRestDurationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SetQuantity", DbType="Int")]
		public System.Nullable<int> SetQuantity
		{
			get
			{
				return this._SetQuantity;
			}
			set
			{
				if ((this._SetQuantity != value))
				{
					this.OnSetQuantityChanging(value);
					this.SendPropertyChanging();
					this._SetQuantity = value;
					this.SendPropertyChanged("SetQuantity");
					this.OnSetQuantityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Value", DbType="VarChar(255)")]
		public string Value
		{
			get
			{
				return this._Value;
			}
			set
			{
				if ((this._Value != value))
				{
					this.OnValueChanging(value);
					this.SendPropertyChanging();
					this._Value = value;
					this.SendPropertyChanged("Value");
					this.OnValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Exercise_ExerciseProgressXref", Storage="_ExerciseProgressXrefs", ThisKey="Id", OtherKey="ExerciseId")]
		public EntitySet<ExerciseProgressXref> ExerciseProgressXrefs
		{
			get
			{
				return this._ExerciseProgressXrefs;
			}
			set
			{
				this._ExerciseProgressXrefs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Exercise_Message", Storage="_Messages", ThisKey="Id", OtherKey="ExerciseId")]
		public EntitySet<Message> Messages
		{
			get
			{
				return this._Messages;
			}
			set
			{
				this._Messages.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Exercise_Note", Storage="_Notes", ThisKey="Id", OtherKey="ExerciseId")]
		public EntitySet<Note> Notes
		{
			get
			{
				return this._Notes;
			}
			set
			{
				this._Notes.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ExerciseTemplate_Exercise", Storage="_ExerciseTemplate", ThisKey="ExerciseTemplateId", OtherKey="Id", IsForeignKey=true)]
		public ExerciseTemplate ExerciseTemplate
		{
			get
			{
				return this._ExerciseTemplate.Entity;
			}
			set
			{
				ExerciseTemplate previousValue = this._ExerciseTemplate.Entity;
				if (((previousValue != value) 
							|| (this._ExerciseTemplate.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ExerciseTemplate.Entity = null;
						previousValue.Exercises.Remove(this);
					}
					this._ExerciseTemplate.Entity = value;
					if ((value != null))
					{
						value.Exercises.Add(this);
						this._ExerciseTemplateId = value.Id;
					}
					else
					{
						this._ExerciseTemplateId = default(int);
					}
					this.SendPropertyChanged("ExerciseTemplate");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Protocol_Exercise", Storage="_Protocol", ThisKey="ProtocolId", OtherKey="Id", IsForeignKey=true)]
		public Protocol Protocol
		{
			get
			{
				return this._Protocol.Entity;
			}
			set
			{
				Protocol previousValue = this._Protocol.Entity;
				if (((previousValue != value) 
							|| (this._Protocol.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Protocol.Entity = null;
						previousValue.Exercises.Remove(this);
					}
					this._Protocol.Entity = value;
					if ((value != null))
					{
						value.Exercises.Add(this);
						this._ProtocolId = value.Id;
					}
					else
					{
						this._ProtocolId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Protocol");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ProtocolTemplate_Exercise", Storage="_ProtocolTemplate", ThisKey="ProtocolTemplateId", OtherKey="Id", IsForeignKey=true)]
		public ProtocolTemplate ProtocolTemplate
		{
			get
			{
				return this._ProtocolTemplate.Entity;
			}
			set
			{
				ProtocolTemplate previousValue = this._ProtocolTemplate.Entity;
				if (((previousValue != value) 
							|| (this._ProtocolTemplate.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ProtocolTemplate.Entity = null;
						previousValue.Exercises.Remove(this);
					}
					this._ProtocolTemplate.Entity = value;
					if ((value != null))
					{
						value.Exercises.Add(this);
						this._ProtocolTemplateId = value.Id;
					}
					else
					{
						this._ProtocolTemplateId = default(Nullable<int>);
					}
					this.SendPropertyChanged("ProtocolTemplate");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ExerciseProgressXrefs(ExerciseProgressXref entity)
		{
			this.SendPropertyChanging();
			entity.Exercise = this;
		}
		
		private void detach_ExerciseProgressXrefs(ExerciseProgressXref entity)
		{
			this.SendPropertyChanging();
			entity.Exercise = null;
		}
		
		private void attach_Messages(Message entity)
		{
			this.SendPropertyChanging();
			entity.Exercise = this;
		}
		
		private void detach_Messages(Message entity)
		{
			this.SendPropertyChanging();
			entity.Exercise = null;
		}
		
		private void attach_Notes(Note entity)
		{
			this.SendPropertyChanging();
			entity.Exercise = this;
		}
		
		private void detach_Notes(Note entity)
		{
			this.SendPropertyChanging();
			entity.Exercise = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ExerciseProgressXref")]
	public partial class ExerciseProgressXref : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _ProgressId;
		
		private int _ExerciseId;
		
		private long _Timestamp;
		
		private EntityRef<Exercise> _Exercise;
		
		private EntityRef<Progress> _Progress;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnProgressIdChanging(int value);
    partial void OnProgressIdChanged();
    partial void OnExerciseIdChanging(int value);
    partial void OnExerciseIdChanged();
    partial void OnTimestampChanging(long value);
    partial void OnTimestampChanged();
    #endregion
		
		public ExerciseProgressXref()
		{
			this._Exercise = default(EntityRef<Exercise>);
			this._Progress = default(EntityRef<Progress>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProgressId", DbType="Int NOT NULL")]
		public int ProgressId
		{
			get
			{
				return this._ProgressId;
			}
			set
			{
				if ((this._ProgressId != value))
				{
					if (this._Progress.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProgressIdChanging(value);
					this.SendPropertyChanging();
					this._ProgressId = value;
					this.SendPropertyChanged("ProgressId");
					this.OnProgressIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ExerciseId", DbType="Int NOT NULL")]
		public int ExerciseId
		{
			get
			{
				return this._ExerciseId;
			}
			set
			{
				if ((this._ExerciseId != value))
				{
					if (this._Exercise.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnExerciseIdChanging(value);
					this.SendPropertyChanging();
					this._ExerciseId = value;
					this.SendPropertyChanged("ExerciseId");
					this.OnExerciseIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Timestamp", DbType="BigInt NOT NULL")]
		public long Timestamp
		{
			get
			{
				return this._Timestamp;
			}
			set
			{
				if ((this._Timestamp != value))
				{
					this.OnTimestampChanging(value);
					this.SendPropertyChanging();
					this._Timestamp = value;
					this.SendPropertyChanged("Timestamp");
					this.OnTimestampChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Exercise_ExerciseProgressXref", Storage="_Exercise", ThisKey="ExerciseId", OtherKey="Id", IsForeignKey=true)]
		public Exercise Exercise
		{
			get
			{
				return this._Exercise.Entity;
			}
			set
			{
				Exercise previousValue = this._Exercise.Entity;
				if (((previousValue != value) 
							|| (this._Exercise.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Exercise.Entity = null;
						previousValue.ExerciseProgressXrefs.Remove(this);
					}
					this._Exercise.Entity = value;
					if ((value != null))
					{
						value.ExerciseProgressXrefs.Add(this);
						this._ExerciseId = value.Id;
					}
					else
					{
						this._ExerciseId = default(int);
					}
					this.SendPropertyChanged("Exercise");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Progress_ExerciseProgressXref", Storage="_Progress", ThisKey="ProgressId", OtherKey="Id", IsForeignKey=true)]
		public Progress Progress
		{
			get
			{
				return this._Progress.Entity;
			}
			set
			{
				Progress previousValue = this._Progress.Entity;
				if (((previousValue != value) 
							|| (this._Progress.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Progress.Entity = null;
						previousValue.ExerciseProgressXrefs.Remove(this);
					}
					this._Progress.Entity = value;
					if ((value != null))
					{
						value.ExerciseProgressXrefs.Add(this);
						this._ProgressId = value.Id;
					}
					else
					{
						this._ProgressId = default(int);
					}
					this.SendPropertyChanged("Progress");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ExerciseTemplate")]
	public partial class ExerciseTemplate : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _CategoryId;
		
		private bool _HasTimer;
		
		private string _IconPath;
		
		private System.Nullable<int> _TimerDuration;
		
		private bool _IsDefault;
		
		private string _Name;
		
		private EntitySet<Exercise> _Exercises;
		
		private EntitySet<ExerciseTemplateDoctorXref> _ExerciseTemplateDoctorXrefs;
		
		private EntitySet<Instruction> _Instructions;
		
		private EntitySet<Tag> _Tags;
		
		private EntityRef<Category> _Category;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnCategoryIdChanging(int value);
    partial void OnCategoryIdChanged();
    partial void OnHasTimerChanging(bool value);
    partial void OnHasTimerChanged();
    partial void OnIconPathChanging(string value);
    partial void OnIconPathChanged();
    partial void OnTimerDurationChanging(System.Nullable<int> value);
    partial void OnTimerDurationChanged();
    partial void OnIsDefaultChanging(bool value);
    partial void OnIsDefaultChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public ExerciseTemplate()
		{
			this._Exercises = new EntitySet<Exercise>(new Action<Exercise>(this.attach_Exercises), new Action<Exercise>(this.detach_Exercises));
			this._ExerciseTemplateDoctorXrefs = new EntitySet<ExerciseTemplateDoctorXref>(new Action<ExerciseTemplateDoctorXref>(this.attach_ExerciseTemplateDoctorXrefs), new Action<ExerciseTemplateDoctorXref>(this.detach_ExerciseTemplateDoctorXrefs));
			this._Instructions = new EntitySet<Instruction>(new Action<Instruction>(this.attach_Instructions), new Action<Instruction>(this.detach_Instructions));
			this._Tags = new EntitySet<Tag>(new Action<Tag>(this.attach_Tags), new Action<Tag>(this.detach_Tags));
			this._Category = default(EntityRef<Category>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CategoryId", DbType="Int NOT NULL")]
		public int CategoryId
		{
			get
			{
				return this._CategoryId;
			}
			set
			{
				if ((this._CategoryId != value))
				{
					if (this._Category.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCategoryIdChanging(value);
					this.SendPropertyChanging();
					this._CategoryId = value;
					this.SendPropertyChanged("CategoryId");
					this.OnCategoryIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HasTimer", DbType="Bit NOT NULL")]
		public bool HasTimer
		{
			get
			{
				return this._HasTimer;
			}
			set
			{
				if ((this._HasTimer != value))
				{
					this.OnHasTimerChanging(value);
					this.SendPropertyChanging();
					this._HasTimer = value;
					this.SendPropertyChanged("HasTimer");
					this.OnHasTimerChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IconPath", DbType="VarChar(1000) NOT NULL", CanBeNull=false)]
		public string IconPath
		{
			get
			{
				return this._IconPath;
			}
			set
			{
				if ((this._IconPath != value))
				{
					this.OnIconPathChanging(value);
					this.SendPropertyChanging();
					this._IconPath = value;
					this.SendPropertyChanged("IconPath");
					this.OnIconPathChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TimerDuration", DbType="Int")]
		public System.Nullable<int> TimerDuration
		{
			get
			{
				return this._TimerDuration;
			}
			set
			{
				if ((this._TimerDuration != value))
				{
					this.OnTimerDurationChanging(value);
					this.SendPropertyChanging();
					this._TimerDuration = value;
					this.SendPropertyChanged("TimerDuration");
					this.OnTimerDurationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsDefault", DbType="Bit NOT NULL")]
		public bool IsDefault
		{
			get
			{
				return this._IsDefault;
			}
			set
			{
				if ((this._IsDefault != value))
				{
					this.OnIsDefaultChanging(value);
					this.SendPropertyChanging();
					this._IsDefault = value;
					this.SendPropertyChanged("IsDefault");
					this.OnIsDefaultChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(255) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ExerciseTemplate_Exercise", Storage="_Exercises", ThisKey="Id", OtherKey="ExerciseTemplateId")]
		public EntitySet<Exercise> Exercises
		{
			get
			{
				return this._Exercises;
			}
			set
			{
				this._Exercises.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ExerciseTemplate_ExerciseTemplateDoctorXref", Storage="_ExerciseTemplateDoctorXrefs", ThisKey="Id", OtherKey="ExerciseTemplateId")]
		public EntitySet<ExerciseTemplateDoctorXref> ExerciseTemplateDoctorXrefs
		{
			get
			{
				return this._ExerciseTemplateDoctorXrefs;
			}
			set
			{
				this._ExerciseTemplateDoctorXrefs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ExerciseTemplate_Instruction", Storage="_Instructions", ThisKey="Id", OtherKey="ExerciseTemplateId")]
		public EntitySet<Instruction> Instructions
		{
			get
			{
				return this._Instructions;
			}
			set
			{
				this._Instructions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ExerciseTemplate_Tag", Storage="_Tags", ThisKey="Id", OtherKey="ExerciseTemplateId")]
		public EntitySet<Tag> Tags
		{
			get
			{
				return this._Tags;
			}
			set
			{
				this._Tags.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Category_ExerciseTemplate", Storage="_Category", ThisKey="CategoryId", OtherKey="Id", IsForeignKey=true)]
		public Category Category
		{
			get
			{
				return this._Category.Entity;
			}
			set
			{
				Category previousValue = this._Category.Entity;
				if (((previousValue != value) 
							|| (this._Category.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Category.Entity = null;
						previousValue.ExerciseTemplates.Remove(this);
					}
					this._Category.Entity = value;
					if ((value != null))
					{
						value.ExerciseTemplates.Add(this);
						this._CategoryId = value.Id;
					}
					else
					{
						this._CategoryId = default(int);
					}
					this.SendPropertyChanged("Category");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Exercises(Exercise entity)
		{
			this.SendPropertyChanging();
			entity.ExerciseTemplate = this;
		}
		
		private void detach_Exercises(Exercise entity)
		{
			this.SendPropertyChanging();
			entity.ExerciseTemplate = null;
		}
		
		private void attach_ExerciseTemplateDoctorXrefs(ExerciseTemplateDoctorXref entity)
		{
			this.SendPropertyChanging();
			entity.ExerciseTemplate = this;
		}
		
		private void detach_ExerciseTemplateDoctorXrefs(ExerciseTemplateDoctorXref entity)
		{
			this.SendPropertyChanging();
			entity.ExerciseTemplate = null;
		}
		
		private void attach_Instructions(Instruction entity)
		{
			this.SendPropertyChanging();
			entity.ExerciseTemplate = this;
		}
		
		private void detach_Instructions(Instruction entity)
		{
			this.SendPropertyChanging();
			entity.ExerciseTemplate = null;
		}
		
		private void attach_Tags(Tag entity)
		{
			this.SendPropertyChanging();
			entity.ExerciseTemplate = this;
		}
		
		private void detach_Tags(Tag entity)
		{
			this.SendPropertyChanging();
			entity.ExerciseTemplate = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ExerciseTemplateDoctorXref")]
	public partial class ExerciseTemplateDoctorXref : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ExerciseTemplateId;
		
		private int _DoctorId;
		
		private string _Name;
		
		private int _Counter;
		
		private int _Id;
		
		private EntityRef<ExerciseTemplate> _ExerciseTemplate;
		
		private EntityRef<Person> _Person;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnExerciseTemplateIdChanging(int value);
    partial void OnExerciseTemplateIdChanged();
    partial void OnDoctorIdChanging(int value);
    partial void OnDoctorIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnCounterChanging(int value);
    partial void OnCounterChanged();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    #endregion
		
		public ExerciseTemplateDoctorXref()
		{
			this._ExerciseTemplate = default(EntityRef<ExerciseTemplate>);
			this._Person = default(EntityRef<Person>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ExerciseTemplateId", DbType="Int NOT NULL")]
		public int ExerciseTemplateId
		{
			get
			{
				return this._ExerciseTemplateId;
			}
			set
			{
				if ((this._ExerciseTemplateId != value))
				{
					if (this._ExerciseTemplate.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnExerciseTemplateIdChanging(value);
					this.SendPropertyChanging();
					this._ExerciseTemplateId = value;
					this.SendPropertyChanged("ExerciseTemplateId");
					this.OnExerciseTemplateIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DoctorId", DbType="Int NOT NULL")]
		public int DoctorId
		{
			get
			{
				return this._DoctorId;
			}
			set
			{
				if ((this._DoctorId != value))
				{
					if (this._Person.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDoctorIdChanging(value);
					this.SendPropertyChanging();
					this._DoctorId = value;
					this.SendPropertyChanged("DoctorId");
					this.OnDoctorIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(255)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Counter", DbType="Int NOT NULL")]
		public int Counter
		{
			get
			{
				return this._Counter;
			}
			set
			{
				if ((this._Counter != value))
				{
					this.OnCounterChanging(value);
					this.SendPropertyChanging();
					this._Counter = value;
					this.SendPropertyChanged("Counter");
					this.OnCounterChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ExerciseTemplate_ExerciseTemplateDoctorXref", Storage="_ExerciseTemplate", ThisKey="ExerciseTemplateId", OtherKey="Id", IsForeignKey=true)]
		public ExerciseTemplate ExerciseTemplate
		{
			get
			{
				return this._ExerciseTemplate.Entity;
			}
			set
			{
				ExerciseTemplate previousValue = this._ExerciseTemplate.Entity;
				if (((previousValue != value) 
							|| (this._ExerciseTemplate.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ExerciseTemplate.Entity = null;
						previousValue.ExerciseTemplateDoctorXrefs.Remove(this);
					}
					this._ExerciseTemplate.Entity = value;
					if ((value != null))
					{
						value.ExerciseTemplateDoctorXrefs.Add(this);
						this._ExerciseTemplateId = value.Id;
					}
					else
					{
						this._ExerciseTemplateId = default(int);
					}
					this.SendPropertyChanged("ExerciseTemplate");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Person_ExerciseTemplateDoctorXref", Storage="_Person", ThisKey="DoctorId", OtherKey="Id", IsForeignKey=true)]
		public Person Person
		{
			get
			{
				return this._Person.Entity;
			}
			set
			{
				Person previousValue = this._Person.Entity;
				if (((previousValue != value) 
							|| (this._Person.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Person.Entity = null;
						previousValue.ExerciseTemplateDoctorXrefs.Remove(this);
					}
					this._Person.Entity = value;
					if ((value != null))
					{
						value.ExerciseTemplateDoctorXrefs.Add(this);
						this._DoctorId = value.Id;
					}
					else
					{
						this._DoctorId = default(int);
					}
					this.SendPropertyChanged("Person");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Institution")]
	public partial class Institution : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private EntitySet<Division> _Divisions;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public Institution()
		{
			this._Divisions = new EntitySet<Division>(new Action<Division>(this.attach_Divisions), new Action<Division>(this.detach_Divisions));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(255) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Institution_Division", Storage="_Divisions", ThisKey="Id", OtherKey="InstitutionId")]
		public EntitySet<Division> Divisions
		{
			get
			{
				return this._Divisions;
			}
			set
			{
				this._Divisions.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Divisions(Division entity)
		{
			this.SendPropertyChanging();
			entity.Institution = this;
		}
		
		private void detach_Divisions(Division entity)
		{
			this.SendPropertyChanging();
			entity.Institution = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Instruction")]
	public partial class Instruction : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _ExerciseTemplateId;
		
		private int _Position;
		
		private string _VideoPath;
		
		private string _Text;
		
		private EntitySet<InstructionImage> _InstructionImages;
		
		private EntityRef<ExerciseTemplate> _ExerciseTemplate;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnExerciseTemplateIdChanging(int value);
    partial void OnExerciseTemplateIdChanged();
    partial void OnPositionChanging(int value);
    partial void OnPositionChanged();
    partial void OnVideoPathChanging(string value);
    partial void OnVideoPathChanged();
    partial void OnTextChanging(string value);
    partial void OnTextChanged();
    #endregion
		
		public Instruction()
		{
			this._InstructionImages = new EntitySet<InstructionImage>(new Action<InstructionImage>(this.attach_InstructionImages), new Action<InstructionImage>(this.detach_InstructionImages));
			this._ExerciseTemplate = default(EntityRef<ExerciseTemplate>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ExerciseTemplateId", DbType="Int NOT NULL")]
		public int ExerciseTemplateId
		{
			get
			{
				return this._ExerciseTemplateId;
			}
			set
			{
				if ((this._ExerciseTemplateId != value))
				{
					if (this._ExerciseTemplate.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnExerciseTemplateIdChanging(value);
					this.SendPropertyChanging();
					this._ExerciseTemplateId = value;
					this.SendPropertyChanged("ExerciseTemplateId");
					this.OnExerciseTemplateIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Position", DbType="Int NOT NULL")]
		public int Position
		{
			get
			{
				return this._Position;
			}
			set
			{
				if ((this._Position != value))
				{
					this.OnPositionChanging(value);
					this.SendPropertyChanging();
					this._Position = value;
					this.SendPropertyChanged("Position");
					this.OnPositionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VideoPath", DbType="VarChar(1000)")]
		public string VideoPath
		{
			get
			{
				return this._VideoPath;
			}
			set
			{
				if ((this._VideoPath != value))
				{
					this.OnVideoPathChanging(value);
					this.SendPropertyChanging();
					this._VideoPath = value;
					this.SendPropertyChanged("VideoPath");
					this.OnVideoPathChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Text", DbType="VarChar(MAX)")]
		public string Text
		{
			get
			{
				return this._Text;
			}
			set
			{
				if ((this._Text != value))
				{
					this.OnTextChanging(value);
					this.SendPropertyChanging();
					this._Text = value;
					this.SendPropertyChanged("Text");
					this.OnTextChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Instruction_InstructionImage", Storage="_InstructionImages", ThisKey="Id", OtherKey="InstructionId")]
		public EntitySet<InstructionImage> InstructionImages
		{
			get
			{
				return this._InstructionImages;
			}
			set
			{
				this._InstructionImages.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ExerciseTemplate_Instruction", Storage="_ExerciseTemplate", ThisKey="ExerciseTemplateId", OtherKey="Id", IsForeignKey=true)]
		public ExerciseTemplate ExerciseTemplate
		{
			get
			{
				return this._ExerciseTemplate.Entity;
			}
			set
			{
				ExerciseTemplate previousValue = this._ExerciseTemplate.Entity;
				if (((previousValue != value) 
							|| (this._ExerciseTemplate.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ExerciseTemplate.Entity = null;
						previousValue.Instructions.Remove(this);
					}
					this._ExerciseTemplate.Entity = value;
					if ((value != null))
					{
						value.Instructions.Add(this);
						this._ExerciseTemplateId = value.Id;
					}
					else
					{
						this._ExerciseTemplateId = default(int);
					}
					this.SendPropertyChanged("ExerciseTemplate");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_InstructionImages(InstructionImage entity)
		{
			this.SendPropertyChanging();
			entity.Instruction = this;
		}
		
		private void detach_InstructionImages(InstructionImage entity)
		{
			this.SendPropertyChanging();
			entity.Instruction = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.InstructionImage")]
	public partial class InstructionImage : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _ImagePath;
		
		private string _ThumbnailPath;
		
		private int _InstructionId;
		
		private int _Position;
		
		private EntityRef<Instruction> _Instruction;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnImagePathChanging(string value);
    partial void OnImagePathChanged();
    partial void OnThumbnailPathChanging(string value);
    partial void OnThumbnailPathChanged();
    partial void OnInstructionIdChanging(int value);
    partial void OnInstructionIdChanged();
    partial void OnPositionChanging(int value);
    partial void OnPositionChanged();
    #endregion
		
		public InstructionImage()
		{
			this._Instruction = default(EntityRef<Instruction>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ImagePath", DbType="VarChar(1000) NOT NULL", CanBeNull=false)]
		public string ImagePath
		{
			get
			{
				return this._ImagePath;
			}
			set
			{
				if ((this._ImagePath != value))
				{
					this.OnImagePathChanging(value);
					this.SendPropertyChanging();
					this._ImagePath = value;
					this.SendPropertyChanged("ImagePath");
					this.OnImagePathChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ThumbnailPath", DbType="VarChar(1000) NOT NULL", CanBeNull=false)]
		public string ThumbnailPath
		{
			get
			{
				return this._ThumbnailPath;
			}
			set
			{
				if ((this._ThumbnailPath != value))
				{
					this.OnThumbnailPathChanging(value);
					this.SendPropertyChanging();
					this._ThumbnailPath = value;
					this.SendPropertyChanged("ThumbnailPath");
					this.OnThumbnailPathChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InstructionId", DbType="Int NOT NULL")]
		public int InstructionId
		{
			get
			{
				return this._InstructionId;
			}
			set
			{
				if ((this._InstructionId != value))
				{
					if (this._Instruction.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnInstructionIdChanging(value);
					this.SendPropertyChanging();
					this._InstructionId = value;
					this.SendPropertyChanged("InstructionId");
					this.OnInstructionIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Position", DbType="Int NOT NULL")]
		public int Position
		{
			get
			{
				return this._Position;
			}
			set
			{
				if ((this._Position != value))
				{
					this.OnPositionChanging(value);
					this.SendPropertyChanging();
					this._Position = value;
					this.SendPropertyChanged("Position");
					this.OnPositionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Instruction_InstructionImage", Storage="_Instruction", ThisKey="InstructionId", OtherKey="Id", IsForeignKey=true)]
		public Instruction Instruction
		{
			get
			{
				return this._Instruction.Entity;
			}
			set
			{
				Instruction previousValue = this._Instruction.Entity;
				if (((previousValue != value) 
							|| (this._Instruction.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Instruction.Entity = null;
						previousValue.InstructionImages.Remove(this);
					}
					this._Instruction.Entity = value;
					if ((value != null))
					{
						value.InstructionImages.Add(this);
						this._InstructionId = value.Id;
					}
					else
					{
						this._InstructionId = default(int);
					}
					this.SendPropertyChanged("Instruction");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Message")]
	public partial class Message : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _ProtocolId;
		
		private System.Nullable<int> _ExerciseId;
		
		private int _PersonId;
		
		private string _Value;
		
		private int _ContentTypeId;
		
		private long _Timestamp;
		
		private EntityRef<ContentType> _ContentType;
		
		private EntityRef<Exercise> _Exercise;
		
		private EntityRef<Person> _Person;
		
		private EntityRef<Protocol> _Protocol;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnProtocolIdChanging(int value);
    partial void OnProtocolIdChanged();
    partial void OnExerciseIdChanging(System.Nullable<int> value);
    partial void OnExerciseIdChanged();
    partial void OnPersonIdChanging(int value);
    partial void OnPersonIdChanged();
    partial void OnValueChanging(string value);
    partial void OnValueChanged();
    partial void OnContentTypeIdChanging(int value);
    partial void OnContentTypeIdChanged();
    partial void OnTimestampChanging(long value);
    partial void OnTimestampChanged();
    #endregion
		
		public Message()
		{
			this._ContentType = default(EntityRef<ContentType>);
			this._Exercise = default(EntityRef<Exercise>);
			this._Person = default(EntityRef<Person>);
			this._Protocol = default(EntityRef<Protocol>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProtocolId", DbType="Int NOT NULL")]
		public int ProtocolId
		{
			get
			{
				return this._ProtocolId;
			}
			set
			{
				if ((this._ProtocolId != value))
				{
					if (this._Protocol.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProtocolIdChanging(value);
					this.SendPropertyChanging();
					this._ProtocolId = value;
					this.SendPropertyChanged("ProtocolId");
					this.OnProtocolIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ExerciseId", DbType="Int")]
		public System.Nullable<int> ExerciseId
		{
			get
			{
				return this._ExerciseId;
			}
			set
			{
				if ((this._ExerciseId != value))
				{
					if (this._Exercise.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnExerciseIdChanging(value);
					this.SendPropertyChanging();
					this._ExerciseId = value;
					this.SendPropertyChanged("ExerciseId");
					this.OnExerciseIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PersonId", DbType="Int NOT NULL")]
		public int PersonId
		{
			get
			{
				return this._PersonId;
			}
			set
			{
				if ((this._PersonId != value))
				{
					if (this._Person.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPersonIdChanging(value);
					this.SendPropertyChanging();
					this._PersonId = value;
					this.SendPropertyChanged("PersonId");
					this.OnPersonIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Value", DbType="VarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Value
		{
			get
			{
				return this._Value;
			}
			set
			{
				if ((this._Value != value))
				{
					this.OnValueChanging(value);
					this.SendPropertyChanging();
					this._Value = value;
					this.SendPropertyChanged("Value");
					this.OnValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ContentTypeId", DbType="Int NOT NULL")]
		public int ContentTypeId
		{
			get
			{
				return this._ContentTypeId;
			}
			set
			{
				if ((this._ContentTypeId != value))
				{
					if (this._ContentType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnContentTypeIdChanging(value);
					this.SendPropertyChanging();
					this._ContentTypeId = value;
					this.SendPropertyChanged("ContentTypeId");
					this.OnContentTypeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Timestamp", DbType="BigInt NOT NULL")]
		public long Timestamp
		{
			get
			{
				return this._Timestamp;
			}
			set
			{
				if ((this._Timestamp != value))
				{
					this.OnTimestampChanging(value);
					this.SendPropertyChanging();
					this._Timestamp = value;
					this.SendPropertyChanged("Timestamp");
					this.OnTimestampChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ContentType_Message", Storage="_ContentType", ThisKey="ContentTypeId", OtherKey="Id", IsForeignKey=true)]
		public ContentType ContentType
		{
			get
			{
				return this._ContentType.Entity;
			}
			set
			{
				ContentType previousValue = this._ContentType.Entity;
				if (((previousValue != value) 
							|| (this._ContentType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ContentType.Entity = null;
						previousValue.Messages.Remove(this);
					}
					this._ContentType.Entity = value;
					if ((value != null))
					{
						value.Messages.Add(this);
						this._ContentTypeId = value.Id;
					}
					else
					{
						this._ContentTypeId = default(int);
					}
					this.SendPropertyChanged("ContentType");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Exercise_Message", Storage="_Exercise", ThisKey="ExerciseId", OtherKey="Id", IsForeignKey=true)]
		public Exercise Exercise
		{
			get
			{
				return this._Exercise.Entity;
			}
			set
			{
				Exercise previousValue = this._Exercise.Entity;
				if (((previousValue != value) 
							|| (this._Exercise.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Exercise.Entity = null;
						previousValue.Messages.Remove(this);
					}
					this._Exercise.Entity = value;
					if ((value != null))
					{
						value.Messages.Add(this);
						this._ExerciseId = value.Id;
					}
					else
					{
						this._ExerciseId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Exercise");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Person_Message", Storage="_Person", ThisKey="PersonId", OtherKey="Id", IsForeignKey=true)]
		public Person Person
		{
			get
			{
				return this._Person.Entity;
			}
			set
			{
				Person previousValue = this._Person.Entity;
				if (((previousValue != value) 
							|| (this._Person.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Person.Entity = null;
						previousValue.Messages.Remove(this);
					}
					this._Person.Entity = value;
					if ((value != null))
					{
						value.Messages.Add(this);
						this._PersonId = value.Id;
					}
					else
					{
						this._PersonId = default(int);
					}
					this.SendPropertyChanged("Person");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Protocol_Message", Storage="_Protocol", ThisKey="ProtocolId", OtherKey="Id", IsForeignKey=true)]
		public Protocol Protocol
		{
			get
			{
				return this._Protocol.Entity;
			}
			set
			{
				Protocol previousValue = this._Protocol.Entity;
				if (((previousValue != value) 
							|| (this._Protocol.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Protocol.Entity = null;
						previousValue.Messages.Remove(this);
					}
					this._Protocol.Entity = value;
					if ((value != null))
					{
						value.Messages.Add(this);
						this._ProtocolId = value.Id;
					}
					else
					{
						this._ProtocolId = default(int);
					}
					this.SendPropertyChanged("Protocol");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Note")]
	public partial class Note : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _ProtocolId;
		
		private System.Nullable<int> _ExerciseId;
		
		private int _PersonId;
		
		private string _Text;
		
		private EntityRef<Exercise> _Exercise;
		
		private EntityRef<Person> _Person;
		
		private EntityRef<Protocol> _Protocol;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnProtocolIdChanging(int value);
    partial void OnProtocolIdChanged();
    partial void OnExerciseIdChanging(System.Nullable<int> value);
    partial void OnExerciseIdChanged();
    partial void OnPersonIdChanging(int value);
    partial void OnPersonIdChanged();
    partial void OnTextChanging(string value);
    partial void OnTextChanged();
    #endregion
		
		public Note()
		{
			this._Exercise = default(EntityRef<Exercise>);
			this._Person = default(EntityRef<Person>);
			this._Protocol = default(EntityRef<Protocol>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProtocolId", DbType="Int NOT NULL")]
		public int ProtocolId
		{
			get
			{
				return this._ProtocolId;
			}
			set
			{
				if ((this._ProtocolId != value))
				{
					if (this._Protocol.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProtocolIdChanging(value);
					this.SendPropertyChanging();
					this._ProtocolId = value;
					this.SendPropertyChanged("ProtocolId");
					this.OnProtocolIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ExerciseId", DbType="Int")]
		public System.Nullable<int> ExerciseId
		{
			get
			{
				return this._ExerciseId;
			}
			set
			{
				if ((this._ExerciseId != value))
				{
					if (this._Exercise.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnExerciseIdChanging(value);
					this.SendPropertyChanging();
					this._ExerciseId = value;
					this.SendPropertyChanged("ExerciseId");
					this.OnExerciseIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PersonId", DbType="Int NOT NULL")]
		public int PersonId
		{
			get
			{
				return this._PersonId;
			}
			set
			{
				if ((this._PersonId != value))
				{
					if (this._Person.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPersonIdChanging(value);
					this.SendPropertyChanging();
					this._PersonId = value;
					this.SendPropertyChanged("PersonId");
					this.OnPersonIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Text", DbType="VarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Text
		{
			get
			{
				return this._Text;
			}
			set
			{
				if ((this._Text != value))
				{
					this.OnTextChanging(value);
					this.SendPropertyChanging();
					this._Text = value;
					this.SendPropertyChanged("Text");
					this.OnTextChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Exercise_Note", Storage="_Exercise", ThisKey="ExerciseId", OtherKey="Id", IsForeignKey=true)]
		public Exercise Exercise
		{
			get
			{
				return this._Exercise.Entity;
			}
			set
			{
				Exercise previousValue = this._Exercise.Entity;
				if (((previousValue != value) 
							|| (this._Exercise.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Exercise.Entity = null;
						previousValue.Notes.Remove(this);
					}
					this._Exercise.Entity = value;
					if ((value != null))
					{
						value.Notes.Add(this);
						this._ExerciseId = value.Id;
					}
					else
					{
						this._ExerciseId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Exercise");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Person_Note", Storage="_Person", ThisKey="PersonId", OtherKey="Id", IsForeignKey=true)]
		public Person Person
		{
			get
			{
				return this._Person.Entity;
			}
			set
			{
				Person previousValue = this._Person.Entity;
				if (((previousValue != value) 
							|| (this._Person.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Person.Entity = null;
						previousValue.Notes.Remove(this);
					}
					this._Person.Entity = value;
					if ((value != null))
					{
						value.Notes.Add(this);
						this._PersonId = value.Id;
					}
					else
					{
						this._PersonId = default(int);
					}
					this.SendPropertyChanged("Person");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Protocol_Note", Storage="_Protocol", ThisKey="ProtocolId", OtherKey="Id", IsForeignKey=true)]
		public Protocol Protocol
		{
			get
			{
				return this._Protocol.Entity;
			}
			set
			{
				Protocol previousValue = this._Protocol.Entity;
				if (((previousValue != value) 
							|| (this._Protocol.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Protocol.Entity = null;
						previousValue.Notes.Remove(this);
					}
					this._Protocol.Entity = value;
					if ((value != null))
					{
						value.Notes.Add(this);
						this._ProtocolId = value.Id;
					}
					else
					{
						this._ProtocolId = default(int);
					}
					this.SendPropertyChanged("Protocol");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Person")]
	public partial class Person : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private System.Nullable<int> _DivisionId;
		
		private string _FirstName;
		
		private string _MiddleName;
		
		private string _LastName;
		
		private int _UserId;
		
		private string _Permissions;
		
		private System.Nullable<System.DateTime> _Birthday;
		
		private bool _IsActive;
		
		private string _PushToken;
		
		private EntitySet<ExerciseTemplateDoctorXref> _ExerciseTemplateDoctorXrefs;
		
		private EntitySet<Message> _Messages;
		
		private EntitySet<Note> _Notes;
		
		private EntitySet<PersonSetting> _PersonSettings;
		
		private EntitySet<Protocol> _Protocols;
		
		private EntitySet<ProtocolTemplateDoctorXref> _ProtocolTemplateDoctorXrefs;
		
		private EntityRef<Division> _Division;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnDivisionIdChanging(System.Nullable<int> value);
    partial void OnDivisionIdChanged();
    partial void OnFirstNameChanging(string value);
    partial void OnFirstNameChanged();
    partial void OnMiddleNameChanging(string value);
    partial void OnMiddleNameChanged();
    partial void OnLastNameChanging(string value);
    partial void OnLastNameChanged();
    partial void OnUserIdChanging(int value);
    partial void OnUserIdChanged();
    partial void OnPermissionsChanging(string value);
    partial void OnPermissionsChanged();
    partial void OnBirthdayChanging(System.Nullable<System.DateTime> value);
    partial void OnBirthdayChanged();
    partial void OnIsActiveChanging(bool value);
    partial void OnIsActiveChanged();
    partial void OnPushTokenChanging(string value);
    partial void OnPushTokenChanged();
    #endregion
		
		public Person()
		{
			this._ExerciseTemplateDoctorXrefs = new EntitySet<ExerciseTemplateDoctorXref>(new Action<ExerciseTemplateDoctorXref>(this.attach_ExerciseTemplateDoctorXrefs), new Action<ExerciseTemplateDoctorXref>(this.detach_ExerciseTemplateDoctorXrefs));
			this._Messages = new EntitySet<Message>(new Action<Message>(this.attach_Messages), new Action<Message>(this.detach_Messages));
			this._Notes = new EntitySet<Note>(new Action<Note>(this.attach_Notes), new Action<Note>(this.detach_Notes));
			this._PersonSettings = new EntitySet<PersonSetting>(new Action<PersonSetting>(this.attach_PersonSettings), new Action<PersonSetting>(this.detach_PersonSettings));
			this._Protocols = new EntitySet<Protocol>(new Action<Protocol>(this.attach_Protocols), new Action<Protocol>(this.detach_Protocols));
			this._ProtocolTemplateDoctorXrefs = new EntitySet<ProtocolTemplateDoctorXref>(new Action<ProtocolTemplateDoctorXref>(this.attach_ProtocolTemplateDoctorXrefs), new Action<ProtocolTemplateDoctorXref>(this.detach_ProtocolTemplateDoctorXrefs));
			this._Division = default(EntityRef<Division>);
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DivisionId", DbType="Int")]
		public System.Nullable<int> DivisionId
		{
			get
			{
				return this._DivisionId;
			}
			set
			{
				if ((this._DivisionId != value))
				{
					if (this._Division.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDivisionIdChanging(value);
					this.SendPropertyChanging();
					this._DivisionId = value;
					this.SendPropertyChanged("DivisionId");
					this.OnDivisionIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FirstName", DbType="VarChar(255) NOT NULL", CanBeNull=false)]
		public string FirstName
		{
			get
			{
				return this._FirstName;
			}
			set
			{
				if ((this._FirstName != value))
				{
					this.OnFirstNameChanging(value);
					this.SendPropertyChanging();
					this._FirstName = value;
					this.SendPropertyChanged("FirstName");
					this.OnFirstNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MiddleName", DbType="VarChar(255)")]
		public string MiddleName
		{
			get
			{
				return this._MiddleName;
			}
			set
			{
				if ((this._MiddleName != value))
				{
					this.OnMiddleNameChanging(value);
					this.SendPropertyChanging();
					this._MiddleName = value;
					this.SendPropertyChanged("MiddleName");
					this.OnMiddleNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastName", DbType="VarChar(255) NOT NULL", CanBeNull=false)]
		public string LastName
		{
			get
			{
				return this._LastName;
			}
			set
			{
				if ((this._LastName != value))
				{
					this.OnLastNameChanging(value);
					this.SendPropertyChanging();
					this._LastName = value;
					this.SendPropertyChanged("LastName");
					this.OnLastNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", DbType="Int NOT NULL")]
		public int UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Permissions", DbType="VarChar(255) NOT NULL", CanBeNull=false)]
		public string Permissions
		{
			get
			{
				return this._Permissions;
			}
			set
			{
				if ((this._Permissions != value))
				{
					this.OnPermissionsChanging(value);
					this.SendPropertyChanging();
					this._Permissions = value;
					this.SendPropertyChanged("Permissions");
					this.OnPermissionsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Birthday", DbType="Date")]
		public System.Nullable<System.DateTime> Birthday
		{
			get
			{
				return this._Birthday;
			}
			set
			{
				if ((this._Birthday != value))
				{
					this.OnBirthdayChanging(value);
					this.SendPropertyChanging();
					this._Birthday = value;
					this.SendPropertyChanged("Birthday");
					this.OnBirthdayChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsActive", DbType="Bit NOT NULL")]
		public bool IsActive
		{
			get
			{
				return this._IsActive;
			}
			set
			{
				if ((this._IsActive != value))
				{
					this.OnIsActiveChanging(value);
					this.SendPropertyChanging();
					this._IsActive = value;
					this.SendPropertyChanged("IsActive");
					this.OnIsActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PushToken", DbType="VarChar(MAX)")]
		public string PushToken
		{
			get
			{
				return this._PushToken;
			}
			set
			{
				if ((this._PushToken != value))
				{
					this.OnPushTokenChanging(value);
					this.SendPropertyChanging();
					this._PushToken = value;
					this.SendPropertyChanged("PushToken");
					this.OnPushTokenChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Person_ExerciseTemplateDoctorXref", Storage="_ExerciseTemplateDoctorXrefs", ThisKey="Id", OtherKey="DoctorId")]
		public EntitySet<ExerciseTemplateDoctorXref> ExerciseTemplateDoctorXrefs
		{
			get
			{
				return this._ExerciseTemplateDoctorXrefs;
			}
			set
			{
				this._ExerciseTemplateDoctorXrefs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Person_Message", Storage="_Messages", ThisKey="Id", OtherKey="PersonId")]
		public EntitySet<Message> Messages
		{
			get
			{
				return this._Messages;
			}
			set
			{
				this._Messages.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Person_Note", Storage="_Notes", ThisKey="Id", OtherKey="PersonId")]
		public EntitySet<Note> Notes
		{
			get
			{
				return this._Notes;
			}
			set
			{
				this._Notes.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Person_PersonSetting", Storage="_PersonSettings", ThisKey="Id", OtherKey="PersonId")]
		public EntitySet<PersonSetting> PersonSettings
		{
			get
			{
				return this._PersonSettings;
			}
			set
			{
				this._PersonSettings.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Person_Protocol", Storage="_Protocols", ThisKey="Id", OtherKey="PatientId")]
		public EntitySet<Protocol> Protocols
		{
			get
			{
				return this._Protocols;
			}
			set
			{
				this._Protocols.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Person_ProtocolTemplateDoctorXref", Storage="_ProtocolTemplateDoctorXrefs", ThisKey="Id", OtherKey="DoctorId")]
		public EntitySet<ProtocolTemplateDoctorXref> ProtocolTemplateDoctorXrefs
		{
			get
			{
				return this._ProtocolTemplateDoctorXrefs;
			}
			set
			{
				this._ProtocolTemplateDoctorXrefs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Division_Person", Storage="_Division", ThisKey="DivisionId", OtherKey="Id", IsForeignKey=true)]
		public Division Division
		{
			get
			{
				return this._Division.Entity;
			}
			set
			{
				Division previousValue = this._Division.Entity;
				if (((previousValue != value) 
							|| (this._Division.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Division.Entity = null;
						previousValue.Persons.Remove(this);
					}
					this._Division.Entity = value;
					if ((value != null))
					{
						value.Persons.Add(this);
						this._DivisionId = value.Id;
					}
					else
					{
						this._DivisionId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Division");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Person", Storage="_User", ThisKey="UserId", OtherKey="Id", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.Persons.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.Persons.Add(this);
						this._UserId = value.Id;
					}
					else
					{
						this._UserId = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ExerciseTemplateDoctorXrefs(ExerciseTemplateDoctorXref entity)
		{
			this.SendPropertyChanging();
			entity.Person = this;
		}
		
		private void detach_ExerciseTemplateDoctorXrefs(ExerciseTemplateDoctorXref entity)
		{
			this.SendPropertyChanging();
			entity.Person = null;
		}
		
		private void attach_Messages(Message entity)
		{
			this.SendPropertyChanging();
			entity.Person = this;
		}
		
		private void detach_Messages(Message entity)
		{
			this.SendPropertyChanging();
			entity.Person = null;
		}
		
		private void attach_Notes(Note entity)
		{
			this.SendPropertyChanging();
			entity.Person = this;
		}
		
		private void detach_Notes(Note entity)
		{
			this.SendPropertyChanging();
			entity.Person = null;
		}
		
		private void attach_PersonSettings(PersonSetting entity)
		{
			this.SendPropertyChanging();
			entity.Person = this;
		}
		
		private void detach_PersonSettings(PersonSetting entity)
		{
			this.SendPropertyChanging();
			entity.Person = null;
		}
		
		private void attach_Protocols(Protocol entity)
		{
			this.SendPropertyChanging();
			entity.Person = this;
		}
		
		private void detach_Protocols(Protocol entity)
		{
			this.SendPropertyChanging();
			entity.Person = null;
		}
		
		private void attach_ProtocolTemplateDoctorXrefs(ProtocolTemplateDoctorXref entity)
		{
			this.SendPropertyChanging();
			entity.Person = this;
		}
		
		private void detach_ProtocolTemplateDoctorXrefs(ProtocolTemplateDoctorXref entity)
		{
			this.SendPropertyChanging();
			entity.Person = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PersonSetting")]
	public partial class PersonSetting : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private string _Value;
		
		private int _PersonId;
		
		private EntityRef<Person> _Person;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnValueChanging(string value);
    partial void OnValueChanged();
    partial void OnPersonIdChanging(int value);
    partial void OnPersonIdChanged();
    #endregion
		
		public PersonSetting()
		{
			this._Person = default(EntityRef<Person>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(255) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Value", DbType="VarChar(255) NOT NULL", CanBeNull=false)]
		public string Value
		{
			get
			{
				return this._Value;
			}
			set
			{
				if ((this._Value != value))
				{
					this.OnValueChanging(value);
					this.SendPropertyChanging();
					this._Value = value;
					this.SendPropertyChanged("Value");
					this.OnValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PersonId", DbType="Int NOT NULL")]
		public int PersonId
		{
			get
			{
				return this._PersonId;
			}
			set
			{
				if ((this._PersonId != value))
				{
					if (this._Person.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPersonIdChanging(value);
					this.SendPropertyChanging();
					this._PersonId = value;
					this.SendPropertyChanged("PersonId");
					this.OnPersonIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Person_PersonSetting", Storage="_Person", ThisKey="PersonId", OtherKey="Id", IsForeignKey=true)]
		public Person Person
		{
			get
			{
				return this._Person.Entity;
			}
			set
			{
				Person previousValue = this._Person.Entity;
				if (((previousValue != value) 
							|| (this._Person.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Person.Entity = null;
						previousValue.PersonSettings.Remove(this);
					}
					this._Person.Entity = value;
					if ((value != null))
					{
						value.PersonSettings.Add(this);
						this._PersonId = value.Id;
					}
					else
					{
						this._PersonId = default(int);
					}
					this.SendPropertyChanged("Person");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Progress")]
	public partial class Progress : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Value;
		
		private EntitySet<ExerciseProgressXref> _ExerciseProgressXrefs;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnValueChanging(string value);
    partial void OnValueChanged();
    #endregion
		
		public Progress()
		{
			this._ExerciseProgressXrefs = new EntitySet<ExerciseProgressXref>(new Action<ExerciseProgressXref>(this.attach_ExerciseProgressXrefs), new Action<ExerciseProgressXref>(this.detach_ExerciseProgressXrefs));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Value", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Value
		{
			get
			{
				return this._Value;
			}
			set
			{
				if ((this._Value != value))
				{
					this.OnValueChanging(value);
					this.SendPropertyChanging();
					this._Value = value;
					this.SendPropertyChanged("Value");
					this.OnValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Progress_ExerciseProgressXref", Storage="_ExerciseProgressXrefs", ThisKey="Id", OtherKey="ProgressId")]
		public EntitySet<ExerciseProgressXref> ExerciseProgressXrefs
		{
			get
			{
				return this._ExerciseProgressXrefs;
			}
			set
			{
				this._ExerciseProgressXrefs.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ExerciseProgressXrefs(ExerciseProgressXref entity)
		{
			this.SendPropertyChanging();
			entity.Progress = this;
		}
		
		private void detach_ExerciseProgressXrefs(ExerciseProgressXref entity)
		{
			this.SendPropertyChanging();
			entity.Progress = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Protocol")]
	public partial class Protocol : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _PatientId;
		
		private string _Name;
		
		private string _ImagePath;
		
		private EntitySet<Exercise> _Exercises;
		
		private EntitySet<Message> _Messages;
		
		private EntitySet<Note> _Notes;
		
		private EntityRef<Person> _Person;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnPatientIdChanging(int value);
    partial void OnPatientIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnImagePathChanging(string value);
    partial void OnImagePathChanged();
    #endregion
		
		public Protocol()
		{
			this._Exercises = new EntitySet<Exercise>(new Action<Exercise>(this.attach_Exercises), new Action<Exercise>(this.detach_Exercises));
			this._Messages = new EntitySet<Message>(new Action<Message>(this.attach_Messages), new Action<Message>(this.detach_Messages));
			this._Notes = new EntitySet<Note>(new Action<Note>(this.attach_Notes), new Action<Note>(this.detach_Notes));
			this._Person = default(EntityRef<Person>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PatientId", DbType="Int NOT NULL")]
		public int PatientId
		{
			get
			{
				return this._PatientId;
			}
			set
			{
				if ((this._PatientId != value))
				{
					if (this._Person.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPatientIdChanging(value);
					this.SendPropertyChanging();
					this._PatientId = value;
					this.SendPropertyChanged("PatientId");
					this.OnPatientIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(255)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ImagePath", DbType="VarChar(1000)")]
		public string ImagePath
		{
			get
			{
				return this._ImagePath;
			}
			set
			{
				if ((this._ImagePath != value))
				{
					this.OnImagePathChanging(value);
					this.SendPropertyChanging();
					this._ImagePath = value;
					this.SendPropertyChanged("ImagePath");
					this.OnImagePathChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Protocol_Exercise", Storage="_Exercises", ThisKey="Id", OtherKey="ProtocolId")]
		public EntitySet<Exercise> Exercises
		{
			get
			{
				return this._Exercises;
			}
			set
			{
				this._Exercises.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Protocol_Message", Storage="_Messages", ThisKey="Id", OtherKey="ProtocolId")]
		public EntitySet<Message> Messages
		{
			get
			{
				return this._Messages;
			}
			set
			{
				this._Messages.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Protocol_Note", Storage="_Notes", ThisKey="Id", OtherKey="ProtocolId")]
		public EntitySet<Note> Notes
		{
			get
			{
				return this._Notes;
			}
			set
			{
				this._Notes.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Person_Protocol", Storage="_Person", ThisKey="PatientId", OtherKey="Id", IsForeignKey=true)]
		public Person Person
		{
			get
			{
				return this._Person.Entity;
			}
			set
			{
				Person previousValue = this._Person.Entity;
				if (((previousValue != value) 
							|| (this._Person.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Person.Entity = null;
						previousValue.Protocols.Remove(this);
					}
					this._Person.Entity = value;
					if ((value != null))
					{
						value.Protocols.Add(this);
						this._PatientId = value.Id;
					}
					else
					{
						this._PatientId = default(int);
					}
					this.SendPropertyChanged("Person");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Exercises(Exercise entity)
		{
			this.SendPropertyChanging();
			entity.Protocol = this;
		}
		
		private void detach_Exercises(Exercise entity)
		{
			this.SendPropertyChanging();
			entity.Protocol = null;
		}
		
		private void attach_Messages(Message entity)
		{
			this.SendPropertyChanging();
			entity.Protocol = this;
		}
		
		private void detach_Messages(Message entity)
		{
			this.SendPropertyChanging();
			entity.Protocol = null;
		}
		
		private void attach_Notes(Note entity)
		{
			this.SendPropertyChanging();
			entity.Protocol = this;
		}
		
		private void detach_Notes(Note entity)
		{
			this.SendPropertyChanging();
			entity.Protocol = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ProtocolDoctorXref")]
	public partial class ProtocolDoctorXref
	{
		
		private int _ProtocolId;
		
		private int _DoctorId;
		
		public ProtocolDoctorXref()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProtocolId", DbType="Int NOT NULL")]
		public int ProtocolId
		{
			get
			{
				return this._ProtocolId;
			}
			set
			{
				if ((this._ProtocolId != value))
				{
					this._ProtocolId = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DoctorId", DbType="Int NOT NULL")]
		public int DoctorId
		{
			get
			{
				return this._DoctorId;
			}
			set
			{
				if ((this._DoctorId != value))
				{
					this._DoctorId = value;
				}
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ProtocolTemplate")]
	public partial class ProtocolTemplate : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private bool _IsActive;
		
		private string _IconPath;
		
		private string _Name;
		
		private bool _IsDefault;
		
		private EntitySet<Exercise> _Exercises;
		
		private EntitySet<ProtocolTemplateDoctorXref> _ProtocolTemplateDoctorXrefs;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnIsActiveChanging(bool value);
    partial void OnIsActiveChanged();
    partial void OnIconPathChanging(string value);
    partial void OnIconPathChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnIsDefaultChanging(bool value);
    partial void OnIsDefaultChanged();
    #endregion
		
		public ProtocolTemplate()
		{
			this._Exercises = new EntitySet<Exercise>(new Action<Exercise>(this.attach_Exercises), new Action<Exercise>(this.detach_Exercises));
			this._ProtocolTemplateDoctorXrefs = new EntitySet<ProtocolTemplateDoctorXref>(new Action<ProtocolTemplateDoctorXref>(this.attach_ProtocolTemplateDoctorXrefs), new Action<ProtocolTemplateDoctorXref>(this.detach_ProtocolTemplateDoctorXrefs));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsActive", DbType="Bit NOT NULL")]
		public bool IsActive
		{
			get
			{
				return this._IsActive;
			}
			set
			{
				if ((this._IsActive != value))
				{
					this.OnIsActiveChanging(value);
					this.SendPropertyChanging();
					this._IsActive = value;
					this.SendPropertyChanged("IsActive");
					this.OnIsActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IconPath", DbType="VarChar(1000) NOT NULL", CanBeNull=false)]
		public string IconPath
		{
			get
			{
				return this._IconPath;
			}
			set
			{
				if ((this._IconPath != value))
				{
					this.OnIconPathChanging(value);
					this.SendPropertyChanging();
					this._IconPath = value;
					this.SendPropertyChanged("IconPath");
					this.OnIconPathChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(255) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsDefault", DbType="Bit NOT NULL")]
		public bool IsDefault
		{
			get
			{
				return this._IsDefault;
			}
			set
			{
				if ((this._IsDefault != value))
				{
					this.OnIsDefaultChanging(value);
					this.SendPropertyChanging();
					this._IsDefault = value;
					this.SendPropertyChanged("IsDefault");
					this.OnIsDefaultChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ProtocolTemplate_Exercise", Storage="_Exercises", ThisKey="Id", OtherKey="ProtocolTemplateId")]
		public EntitySet<Exercise> Exercises
		{
			get
			{
				return this._Exercises;
			}
			set
			{
				this._Exercises.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ProtocolTemplate_ProtocolTemplateDoctorXref", Storage="_ProtocolTemplateDoctorXrefs", ThisKey="Id", OtherKey="ProtocolTemplateId")]
		public EntitySet<ProtocolTemplateDoctorXref> ProtocolTemplateDoctorXrefs
		{
			get
			{
				return this._ProtocolTemplateDoctorXrefs;
			}
			set
			{
				this._ProtocolTemplateDoctorXrefs.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Exercises(Exercise entity)
		{
			this.SendPropertyChanging();
			entity.ProtocolTemplate = this;
		}
		
		private void detach_Exercises(Exercise entity)
		{
			this.SendPropertyChanging();
			entity.ProtocolTemplate = null;
		}
		
		private void attach_ProtocolTemplateDoctorXrefs(ProtocolTemplateDoctorXref entity)
		{
			this.SendPropertyChanging();
			entity.ProtocolTemplate = this;
		}
		
		private void detach_ProtocolTemplateDoctorXrefs(ProtocolTemplateDoctorXref entity)
		{
			this.SendPropertyChanging();
			entity.ProtocolTemplate = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ProtocolTemplateDoctorXref")]
	public partial class ProtocolTemplateDoctorXref : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _DoctorId;
		
		private int _ProtocolTemplateId;
		
		private int _Counter;
		
		private string _Name;
		
		private EntityRef<Person> _Person;
		
		private EntityRef<ProtocolTemplate> _ProtocolTemplate;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnDoctorIdChanging(int value);
    partial void OnDoctorIdChanged();
    partial void OnProtocolTemplateIdChanging(int value);
    partial void OnProtocolTemplateIdChanged();
    partial void OnCounterChanging(int value);
    partial void OnCounterChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public ProtocolTemplateDoctorXref()
		{
			this._Person = default(EntityRef<Person>);
			this._ProtocolTemplate = default(EntityRef<ProtocolTemplate>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DoctorId", DbType="Int NOT NULL")]
		public int DoctorId
		{
			get
			{
				return this._DoctorId;
			}
			set
			{
				if ((this._DoctorId != value))
				{
					if (this._Person.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDoctorIdChanging(value);
					this.SendPropertyChanging();
					this._DoctorId = value;
					this.SendPropertyChanged("DoctorId");
					this.OnDoctorIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProtocolTemplateId", DbType="Int NOT NULL")]
		public int ProtocolTemplateId
		{
			get
			{
				return this._ProtocolTemplateId;
			}
			set
			{
				if ((this._ProtocolTemplateId != value))
				{
					if (this._ProtocolTemplate.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProtocolTemplateIdChanging(value);
					this.SendPropertyChanging();
					this._ProtocolTemplateId = value;
					this.SendPropertyChanged("ProtocolTemplateId");
					this.OnProtocolTemplateIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Counter", DbType="Int NOT NULL")]
		public int Counter
		{
			get
			{
				return this._Counter;
			}
			set
			{
				if ((this._Counter != value))
				{
					this.OnCounterChanging(value);
					this.SendPropertyChanging();
					this._Counter = value;
					this.SendPropertyChanged("Counter");
					this.OnCounterChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(255)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Person_ProtocolTemplateDoctorXref", Storage="_Person", ThisKey="DoctorId", OtherKey="Id", IsForeignKey=true)]
		public Person Person
		{
			get
			{
				return this._Person.Entity;
			}
			set
			{
				Person previousValue = this._Person.Entity;
				if (((previousValue != value) 
							|| (this._Person.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Person.Entity = null;
						previousValue.ProtocolTemplateDoctorXrefs.Remove(this);
					}
					this._Person.Entity = value;
					if ((value != null))
					{
						value.ProtocolTemplateDoctorXrefs.Add(this);
						this._DoctorId = value.Id;
					}
					else
					{
						this._DoctorId = default(int);
					}
					this.SendPropertyChanged("Person");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ProtocolTemplate_ProtocolTemplateDoctorXref", Storage="_ProtocolTemplate", ThisKey="ProtocolTemplateId", OtherKey="Id", IsForeignKey=true)]
		public ProtocolTemplate ProtocolTemplate
		{
			get
			{
				return this._ProtocolTemplate.Entity;
			}
			set
			{
				ProtocolTemplate previousValue = this._ProtocolTemplate.Entity;
				if (((previousValue != value) 
							|| (this._ProtocolTemplate.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ProtocolTemplate.Entity = null;
						previousValue.ProtocolTemplateDoctorXrefs.Remove(this);
					}
					this._ProtocolTemplate.Entity = value;
					if ((value != null))
					{
						value.ProtocolTemplateDoctorXrefs.Add(this);
						this._ProtocolTemplateId = value.Id;
					}
					else
					{
						this._ProtocolTemplateId = default(int);
					}
					this.SendPropertyChanged("ProtocolTemplate");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.RegistrationStatus")]
	public partial class RegistrationStatus : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Status;
		
		private EntitySet<User> _Users;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnStatusChanging(string value);
    partial void OnStatusChanged();
    #endregion
		
		public RegistrationStatus()
		{
			this._Users = new EntitySet<User>(new Action<User>(this.attach_Users), new Action<User>(this.detach_Users));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Status", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this.OnStatusChanging(value);
					this.SendPropertyChanging();
					this._Status = value;
					this.SendPropertyChanged("Status");
					this.OnStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="RegistrationStatus_User", Storage="_Users", ThisKey="Id", OtherKey="RegistrationStatusId")]
		public EntitySet<User> Users
		{
			get
			{
				return this._Users;
			}
			set
			{
				this._Users.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Users(User entity)
		{
			this.SendPropertyChanging();
			entity.RegistrationStatus = this;
		}
		
		private void detach_Users(User entity)
		{
			this.SendPropertyChanging();
			entity.RegistrationStatus = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Tag")]
	public partial class Tag : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _ExerciseTemplateId;
		
		private string _Name;
		
		private string _Value;
		
		private EntityRef<ExerciseTemplate> _ExerciseTemplate;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnExerciseTemplateIdChanging(int value);
    partial void OnExerciseTemplateIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnValueChanging(string value);
    partial void OnValueChanged();
    #endregion
		
		public Tag()
		{
			this._ExerciseTemplate = default(EntityRef<ExerciseTemplate>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ExerciseTemplateId", DbType="Int NOT NULL")]
		public int ExerciseTemplateId
		{
			get
			{
				return this._ExerciseTemplateId;
			}
			set
			{
				if ((this._ExerciseTemplateId != value))
				{
					if (this._ExerciseTemplate.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnExerciseTemplateIdChanging(value);
					this.SendPropertyChanging();
					this._ExerciseTemplateId = value;
					this.SendPropertyChanged("ExerciseTemplateId");
					this.OnExerciseTemplateIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(255) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Value", DbType="VarChar(255) NOT NULL", CanBeNull=false)]
		public string Value
		{
			get
			{
				return this._Value;
			}
			set
			{
				if ((this._Value != value))
				{
					this.OnValueChanging(value);
					this.SendPropertyChanging();
					this._Value = value;
					this.SendPropertyChanged("Value");
					this.OnValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ExerciseTemplate_Tag", Storage="_ExerciseTemplate", ThisKey="ExerciseTemplateId", OtherKey="Id", IsForeignKey=true)]
		public ExerciseTemplate ExerciseTemplate
		{
			get
			{
				return this._ExerciseTemplate.Entity;
			}
			set
			{
				ExerciseTemplate previousValue = this._ExerciseTemplate.Entity;
				if (((previousValue != value) 
							|| (this._ExerciseTemplate.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ExerciseTemplate.Entity = null;
						previousValue.Tags.Remove(this);
					}
					this._ExerciseTemplate.Entity = value;
					if ((value != null))
					{
						value.Tags.Add(this);
						this._ExerciseTemplateId = value.Id;
					}
					else
					{
						this._ExerciseTemplateId = default(int);
					}
					this.SendPropertyChanged("ExerciseTemplate");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
